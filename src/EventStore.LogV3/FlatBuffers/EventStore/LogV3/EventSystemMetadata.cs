// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace EventStore.LogV3
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EventSystemMetadata : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static EventSystemMetadata GetRootAsEventSystemMetadata(ByteBuffer _bb) { return GetRootAsEventSystemMetadata(_bb, new EventSystemMetadata()); }
  public static EventSystemMetadata GetRootAsEventSystemMetadata(ByteBuffer _bb, EventSystemMetadata obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventSystemMetadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EventType { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetEventTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetEventTypeArray() { return __p.__vector_as_array<byte>(4); }
  public byte EventId(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int EventIdLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetEventIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetEventIdArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<EventStore.LogV3.EventSystemMetadata> CreateEventSystemMetadata(FlatBufferBuilder builder,
      StringOffset event_typeOffset = default(StringOffset),
      VectorOffset event_idOffset = default(VectorOffset)) {
    builder.StartTable(2);
    EventSystemMetadata.AddEventId(builder, event_idOffset);
    EventSystemMetadata.AddEventType(builder, event_typeOffset);
    return EventSystemMetadata.EndEventSystemMetadata(builder);
  }

  public static void StartEventSystemMetadata(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddEventType(FlatBufferBuilder builder, StringOffset eventTypeOffset) { builder.AddOffset(0, eventTypeOffset.Value, 0); }
  public static void AddEventId(FlatBufferBuilder builder, VectorOffset eventIdOffset) { builder.AddOffset(1, eventIdOffset.Value, 0); }
  public static VectorOffset CreateEventIdVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEventIdVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartEventIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<EventStore.LogV3.EventSystemMetadata> EndEventSystemMetadata(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EventStore.LogV3.EventSystemMetadata>(o);
  }
  public static void FinishEventSystemMetadataBuffer(FlatBufferBuilder builder, Offset<EventStore.LogV3.EventSystemMetadata> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEventSystemMetadataBuffer(FlatBufferBuilder builder, Offset<EventStore.LogV3.EventSystemMetadata> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
